<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.study.dao.BankWithdrawalsMapper" >
  <resultMap id="BaseResultMap" type="com.study.model.BankWithdrawals" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="bank_id" property="bankId" jdbcType="VARCHAR" />
    <result column="bank_type" property="bankType" jdbcType="INTEGER" />
    <result column="amount" property="amount" jdbcType="BIGINT" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="transfer_time" property="transferTime" jdbcType="TIMESTAMP" />
    <result column="left_amount" property="leftAmount" jdbcType="BIGINT" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_id, bank_id, bank_type, amount, status, create_time, transfer_time, left_amount
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from bank_withdrawals
    where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="findPageWithDraw" resultType="com.study.common.apibean.response.BankWithDrawResp" parameterType="com.study.common.apibean.request.BankWithdrawReq" >
    select
    bw.id as withdrawNo,bw.bank_type as type,bw.amount as amount,bw.status as status,bw.create_time as  withdrawTime,bw.transfer_time as receiveTime,
    b.bank_no as bankNo,b.bank_deposit as depositBank,b.name as accountName
    from bank_withdrawals bw,bank b
    where bw.bank_id=b.id
    and bw.user_id = #{userId,jdbcType=INTEGER}
    <if test="status != null" >
      and bw.status=#{status}
    </if>
    order by bw.create_time desc
    limit #{start},#{size}
  </select>

  <select id="findPageWithDrawCount" resultType="java.lang.Integer" parameterType="com.study.common.apibean.request.BankWithdrawReq" >
    select
    count(1)
    from bank_withdrawals bw
    where 1=1
    and bw.user_id = #{userId,jdbcType=INTEGER}
    <if test="status != null" >
      and bw.status=#{status}
    </if>
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from bank_withdrawals
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.study.model.BankWithdrawals" >
    insert into bank_withdrawals (id, user_id, bank_id, 
      bank_type, amount, status, 
      create_time, transfer_time, left_amount
      )
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{bankId,jdbcType=VARCHAR}, 
      #{bankType,jdbcType=INTEGER}, #{amount,jdbcType=BIGINT}, #{status,jdbcType=TINYINT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{transferTime,jdbcType=TIMESTAMP}, #{leftAmount,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.study.model.BankWithdrawals" >
    insert into bank_withdrawals
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="bankId != null" >
        bank_id,
      </if>
      <if test="bankType != null" >
        bank_type,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="transferTime != null" >
        transfer_time,
      </if>
      <if test="leftAmount != null" >
        left_amount,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="bankId != null" >
        #{bankId,jdbcType=VARCHAR},
      </if>
      <if test="bankType != null" >
        #{bankType,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=BIGINT},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="transferTime != null" >
        #{transferTime,jdbcType=TIMESTAMP},
      </if>
      <if test="leftAmount != null" >
        #{leftAmount,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.study.model.BankWithdrawals" >
    update bank_withdrawals
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="bankId != null" >
        bank_id = #{bankId,jdbcType=VARCHAR},
      </if>
      <if test="bankType != null" >
        bank_type = #{bankType,jdbcType=INTEGER},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=BIGINT},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="transferTime != null" >
        transfer_time = #{transferTime,jdbcType=TIMESTAMP},
      </if>
      <if test="leftAmount != null" >
        left_amount = #{leftAmount,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.study.model.BankWithdrawals" >
    update bank_withdrawals
    set user_id = #{userId,jdbcType=INTEGER},
      bank_id = #{bankId,jdbcType=VARCHAR},
      bank_type = #{bankType,jdbcType=INTEGER},
      amount = #{amount,jdbcType=BIGINT},
      status = #{status,jdbcType=TINYINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      transfer_time = #{transferTime,jdbcType=TIMESTAMP},
      left_amount = #{leftAmount,jdbcType=BIGINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>