<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.study.dao.AccountMapper" >
  <resultMap id="BaseResultMap" type="com.study.model.Account" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="balance" property="balance" jdbcType="BIGINT" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_user" property="createUser" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_id, balance, create_time, create_user
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from account
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByUserId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from account
    where user_id = #{userId,jdbcType=INTEGER}
  </select>

  <select id="findHistoryList" resultType="com.study.common.bean.AccountDetailVo" parameterType="com.study.common.apibean.request.AccountInfoPageReq" >
   select  createDate, billType ,type, amount, status, tradeNo from
   ( select
    create_time as createDate,bill_type_code as billType ,1 as type,amount as amount,0 as status,trade_no as tradeNo,left_amount as balance
    from account_deposit_history where user_id=#{id}
    <if test="beginTime != null and beginTime!='' and endTime!=null and endTime!=''">
      and create_time between str_to_date(#{beginTime},'%Y-%m-%d %H:%i:%s') and str_to_date(#{endTime},'%Y-%m-%d %H:%i:%s')
    </if>
    UNION ALL
     select
    create_time as createDate,bill_type_code as billType ,2 as type,amount as amount,0 as status,trade_no as tradeNo,left_amount as balance
    from account_withdrawal_history where user_id=#{id}
    <if test="beginTime != null and beginTime!='' and endTime!=null and endTime!=''">
      and create_time between str_to_date(#{beginTime},'%Y-%m-%d %H:%i:%s') and str_to_date(#{endTime},'%Y-%m-%d %H:%i:%s')
    </if>
    UNION  ALL
     select
    create_time as createDate,0 as billType ,3 as type,amount as amount,status as status,id as tradeNo,left_amount as balance
    from bank_withdrawals where user_id=#{id}
    <if test="beginTime != null and beginTime!='' and endTime!=null and endTime!=''">
      and create_time between str_to_date(#{beginTime},'%Y-%m-%d %H:%i:%s') and str_to_date(#{endTime},'%Y-%m-%d %H:%i:%s')
    </if>
    ) r
     where 1=1
    <if test="type != null">
      and r.type=#{type}
    </if>
     order by r.createDate desc
     limit #{start},#{size}
  </select>


  <select id="findHistoryListCount" resultType="java.lang.Integer" parameterType="com.study.common.apibean.request.AccountInfoPageReq" >
    select  count(1) from
    ( select
    create_time as createDate,bill_type_code as billType ,1 as type,amount as amount,0 as status,trade_no as tradeNo
    from account_deposit_history where user_id=#{id}
    <if test="beginTime != null and beginTime!='' and endTime!=null and endTime!=''">
      and create_time between str_to_date(#{beginTime},'%Y-%m-%d %H:%i:%s') and str_to_date(#{endTime},'%Y-%m-%d %H:%i:%s')
    </if>
    UNION ALL
    select
    create_time as createDate,bill_type_code as billType ,2 as type,amount as amount,0 as status,trade_no as tradeNo
    from account_withdrawal_history where user_id=#{id}
    <if test="beginTime != null and beginTime!='' and endTime!=null and endTime!=''">
      and create_time between str_to_date(#{beginTime},'%Y-%m-%d %H:%i:%s') and str_to_date(#{endTime},'%Y-%m-%d %H:%i:%s')
    </if>
    UNION  ALL
    select
    create_time as createDate,0 as billType ,3 as type,amount as amount,status as status,id as tradeNo
    from bank_withdrawals where user_id=#{id}
    <if test="beginTime != null and beginTime!='' and endTime!=null and endTime!=''">
      and create_time between str_to_date(#{beginTime},'%Y-%m-%d %H:%i:%s') and str_to_date(#{endTime},'%Y-%m-%d %H:%i:%s')
    </if>
    ) r
    where 1=1
    <if test="type != null">
      and r.type=#{type}
    </if>
  </select>

  <select id="findAccountQuery" resultType="com.study.common.bean.AccountQueryVo" parameterType="com.study.common.apibean.request.AccountInfoPageReq" >
    select a.amount,b.inAmount,c.outAmount,d.withdramAmount from

    (select a.balance as amount from account a where a.user_id=#{id} ) a,
    ( select ifnull(sum(adh.amount),0) as inAmount   from account_deposit_history adh
    where adh.user_id=#{id}
    <if test="beginTime != null and beginTime!='' and endTime!=null and endTime!=''">
    and adh.create_time between str_to_date(#{beginTime},'%Y-%m-%d %H:%i:%s') and str_to_date(#{endTime},'%Y-%m-%d %H:%i:%s')
  </if>) b,
    (select ifnull(sum(awh.amount),0) as outAmount from account_withdrawal_history awh
     where   awh.user_id=#{id}
    <if test="beginTime != null and beginTime!='' and endTime!=null and endTime!=''">
      and awh.create_time between str_to_date(#{beginTime},'%Y-%m-%d %H:%i:%s') and str_to_date(#{endTime},'%Y-%m-%d %H:%i:%s')
    </if>
    ) c,
    (select  ifnull(sum(bw.amount),0) as withdramAmount from  bank_withdrawals bw where bw.user_id=#{id}
    <if test="beginTime != null and beginTime!='' and endTime!=null and endTime!=''">
      and bw.create_time between str_to_date(#{beginTime},'%Y-%m-%d %H:%i:%s') and str_to_date(#{endTime},'%Y-%m-%d %H:%i:%s')
    </if>
    ) d

  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from account
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.study.model.Account" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into account (id, user_id, balance, 
      create_time, create_user)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{balance,jdbcType=BIGINT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{createUser,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.study.model.Account" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into account
    <trim prefix="(" suffix=")" suffixOverrides="," >
      id,
      <if test="userId != null" >
        user_id,
      </if>
      <if test="balance != null" >
        balance,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="createUser != null" >
        create_user,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{id,jdbcType=INTEGER},
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="balance != null" >
        #{balance,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        #{createUser,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.study.model.Account" >
    update account
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="balance != null" >
        balance = #{balance,jdbcType=BIGINT},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        create_user = #{createUser,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.study.model.Account" >
    update account
    set user_id = #{userId,jdbcType=INTEGER},
      balance = #{balance,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>